/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GridPanel.java
 *
 * Created on 2 Σεπ 2010, 6:13:48 μμ
 */
package jphotos.panes;

import java.awt.BorderLayout;
import java.awt.Checkbox;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import jphotos.database.FileRecord;
import jphotos.tools.Tools;

/**
 *
 * @author lordovol
 */
public class GridPanel extends javax.swing.JPanel {

  public static final long serialVersionUID = 23534634654764L;
  public ScrollableFlowPanel photoPanel;

  /** Creates new form GridPanel */
  public GridPanel() {
    initComponents();


  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 336, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 464, Short.MAX_VALUE)
    );
  }// </editor-fold>//GEN-END:initComponents

  public void setPhotos(ArrayList<FileRecord> datePhotos) {
    removeAll();
    photoPanel = new ScrollableFlowPanel();
    JScrollPane panel = new JScrollPane(photoPanel);
    panel.getViewport().setOpaque(false);
    panel.setOpaque(false);
    photoPanel.setOpaque(false);
    panel.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    add(panel, BorderLayout.CENTER);
    addComponents();

    //photoPanel.setLayout(new GridLayout((datePhotos.size()/4) + 1,4));
    photoPanel.setLayout(new FlowLayout(FlowLayout.CENTER));
    int count = 0;
    for (Iterator<FileRecord> it = datePhotos.iterator(); it.hasNext();) {
      FileRecord fileRecord = it.next();
      PhotoPanel p = new PhotoPanel(photoPanel, fileRecord, count);
      Thread t = new Thread(p);
      t.start();
      count++;
    }
    revalidate();
    repaint();
  }

  private void addComponents() {
    JPanel south = new JPanel(new FlowLayout(FlowLayout.LEFT));
    final JCheckBox checkAll = new JCheckBox("Επιλογή όλων");
    south.add(checkAll);
    checkAll.addMouseListener(new MouseAdapter() {

      @Override
      public void mouseReleased(MouseEvent e) {
        checkPhotos(checkAll.isSelected());
      }
    });
    ImageIcon albumIcon = new ImageIcon(getClass().getResource("/jphotos/images/photo_icon.png"));
    final JButton addToAlbum = new JButton(albumIcon);
    addToAlbum.setToolTipText("Προσθήκη σε album");
    addToAlbum.addActionListener(new ActionListener() {

      public void actionPerformed(ActionEvent e) {
        addToAlbum();
      }
    });
    south.add(addToAlbum);

    ImageIcon favIcon = new ImageIcon(getClass().getResource("/jphotos/images/fav_icon.png"));
    final JButton addToFav = new JButton(favIcon);
    addToFav.setToolTipText("Προσθήκη στα αγαπημένα");
    addToFav.addActionListener(new ActionListener() {

      public void actionPerformed(ActionEvent e) {
        addToFav();
      }
    });
    south.add(addToFav);

    add(south, BorderLayout.SOUTH);
  }

  private void addToFav() {
    ArrayList<PhotoPanel> photos = new ArrayList<PhotoPanel>();
    Component[] comps = photoPanel.getComponents();
    for (int i = 0; i < comps.length; i++) {
      Component comp = comps[i];
      if (comp instanceof PhotoPanel) {
        PhotoPanel p = (PhotoPanel) comp;
        if (p.check.isSelected()) {
          p.fileRecord.favorite = FileRecord.FAVORITE;
          p.fileRecord.save();
        }
      }
    }
   
  }

  private void addToAlbum() {
    ArrayList<PhotoPanel> photos = new ArrayList<PhotoPanel>();
    Component[] comps = photoPanel.getComponents();
    for (int i = 0; i < comps.length; i++) {
      Component comp = comps[i];
      if (comp instanceof PhotoPanel) {
        PhotoPanel p = (PhotoPanel) comp;
        if (p.check.isSelected()) {
          photos.add(p);
        }
      }
    }
    if (photos.size() > 0) {
      AddToAlbumPanel alb = new AddToAlbumPanel(photos);
    } else {
      Tools.message("Προσθήκη σε Άλμπουμ", "Δεν έχετε επιλέξει κάποια φωτογραφία");
    }
  }

  private void checkPhotos(boolean selected) {
    Component[] photos = photoPanel.getComponents();
    for (int i = 0; i < photos.length; i++) {
      Component ph = photos[i];
      if (ph instanceof PhotoPanel) {
        PhotoPanel p = (PhotoPanel) ph;
        p.check.setSelected(selected);
      }
    }
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
