/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PreviewPanel.java
 *
 * Created on 2 Σεπ 2010, 6:14:15 μμ
 */
package jphotos.panes;

import com.sun.image.codec.jpeg.ImageFormatException;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageDecoder;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import jphotos.Photos;
import jphotos.components.PhotoButton;
import jphotos.components.PhotoButtonListener;
import jphotos.database.Database;
import jphotos.database.FileRecord;
import jphotos.database.Print;
import jphotos.tools.Tools;

/**
 *
 * @author lordovol
 */
public class PreviewPanel extends javax.swing.JPanel {

  public static final int ROTATE_LEFT_DEGREES = 270;
  public static final int ROTATE_RIGHT_DEGREES = 90;
  public static Font INFO_FONT = new Font(null, Font.BOLD, 16);
  private BufferedImage image;
  private int orWidth;
  private int orHeight;
  public static final double RATIO = 0.5;
  private FileRecord fileRecord;

  /** Creates new form PreviewPanel */
  public PreviewPanel() {
    initComponents();
    addButtons();
    setButtonsVisibility(false);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setLayout(new java.awt.GridLayout());
  }// </editor-fold>//GEN-END:initComponents

  @Override
  protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    int w = 10000, h = 10000;
    int i = 0;

    if (image != null) {
      double r = (double) image.getWidth() / (double) image.getHeight();
      //if (image.getWidth() > image.getHeight()) {
      while (h > getHeight() || w > getWidth()) {
        w = getWidth() - i * 10;
        h = (int) (w / r);
        i++;
      }
      Image im = image.getScaledInstance(w, h, Image.SCALE_DEFAULT);
      g.drawImage(im, 10, 10, im.getWidth(this), im.getHeight(this), Color.BLACK, this);
      g.setFont(INFO_FONT);
      g.setColor(Color.BLACK);
      g.drawRect(15, getHeight()-34, 100, 16);
      g.setColor(Color.WHITE);
      g.fillRect(15, getHeight()-34, 100, 16);
      g.setColor(Color.BLACK);
      g.drawString(orWidth + "x"+orHeight, 20, getHeight()-20);
    }
  }

  void setImage(FileRecord fileRecord) {
    this.fileRecord = fileRecord;
    FileInputStream in = null;
    try {
      long i = System.currentTimeMillis();
      in = new FileInputStream(fileRecord.path);
      JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);
      image = decoder.decodeAsBufferedImage();
      in.close();
      double w = RATIO;
      double h = RATIO;
      orWidth = image.getWidth();
      orHeight = image.getHeight();
      if (orWidth > getWidth() || orHeight > getHeight()) {
        double rw = (double) getWidth() / (double) orWidth;
        double rh = (double) getHeight() / (double) orHeight;
        double ratio = rw > rh ? rw : rh;
        BufferedImageOp op = new AffineTransformOp(
                AffineTransform.getScaleInstance(ratio, ratio),
                new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_SPEED));
        image = op.filter(image, null);
      }
      setButtonsVisibility(true);
      revalidate();
      repaint();
    } catch (IOException ex) {
      Logger.getLogger(PreviewPanel.class.getName()).log(Level.SEVERE, null, ex);
    } catch (ImageFormatException ex) {
      Logger.getLogger(PreviewPanel.class.getName()).log(Level.SEVERE, null, ex);
    }    // Variables declaration - do not modify
    // End of variables declaration

  }

  private void addButtons() {

    PhotoButton rotateLeft = new PhotoButton(PhotoButton.ROTATE_LEFT);
    add(rotateLeft);
    PhotoButton rotateRight = new PhotoButton(PhotoButton.ROTATE_RIGHT);
    add(rotateRight);
    PhotoButton print = new PhotoButton(PhotoButton.PRINT);
    add(print);
    Component[] comps = getComponents();
    for (int i = 0; i < comps.length; i++) {
      Component component = comps[i];
      if (component instanceof PhotoButton) {
        PhotoButton b = (PhotoButton) component;
        b.addMouseListener(new PhotoButtonListener(this));
      }
    }
  }

  private void setButtonsVisibility(boolean vis) {
    Component[] comps = getComponents();
    for (int i = 0; i < comps.length; i++) {
      Component component = comps[i];
      component.setVisible(vis);
    }
  }


  public void rotate(int currentAngle) {
    int j = image.getWidth();
    int i = image.getHeight();
    BufferedImage rotatedBI = new BufferedImage(i, j, BufferedImage.TYPE_INT_RGB);
    int p = 0;
    if (currentAngle == 90 || currentAngle == -270) //If we are rotating right...
    {
      for (int x1 = 0; x1 < j; x1++) {
        for (int y1 = 0; y1 < i; y1++) {
          p = image.getRGB(x1, y1);
          rotatedBI.setRGB(i - 1 - y1, x1, p);
        }
      }
    } else //We are rotating left.
    {
      for (int x1 = 0; x1 < j; x1++) {
        for (int y1 = 0; y1 < i; y1++) {
          p = image.getRGB(x1, y1);
          rotatedBI.setRGB(y1, j - 1 - x1, p);
        }
      }
    }
    image = rotatedBI;
  }

  public void addToList() {
   
    Photos p = (Photos) getTopLevelAncestor();
    p.printsPanel.addPhoto(fileRecord);
    

  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
}
