/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Importer.java
 *
 * Created on 2 Σεπ 2010, 9:20:25 μμ
 */
package jphotos.tools;

import java.awt.Frame;
import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import jphotos.Photos;
import jphotos.database.FileRecord;
import jphotos.database.FileTreeRecord;

/**
 *
 * @author lordovol
 */
public class Importer extends MyDraggable {

  private Photos parent;
  private ArrayList<FileTreeRecord> fileTreeRecords;
  private int dirsCount;
  private int filesCount;
  private ArrayList<FileTreeRecord> dirsToImport;
  private ArrayList<File> filesToImport;

  public Importer(Photos parent, ArrayList<FileTreeRecord> fileTreeRecords) {
    this.parent = parent;
    this.fileTreeRecords = fileTreeRecords;
    initComponents();
    dirsCount = fileTreeRecords.size();
    filesCount = Tools.countFiles(fileTreeRecords);
    label_filesCount.setText(String.valueOf(Tools.countFiles(fileTreeRecords)));
    label_dirCount.setText(String.valueOf(fileTreeRecords.size()));
    showGui();

  }

  public Importer(Photos parent, ArrayList<FileTreeRecord> dirsToImport, ArrayList<File> filesToImport) {
    this.parent = parent;
    this.dirsToImport = dirsToImport;
    this.filesToImport = Tools.removeNullEntries(filesToImport);
    initComponents();
    label_filesCount.setText(String.valueOf(this.filesToImport.size()));
    label_dirCount.setText(String.valueOf(dirsToImport.size()));
    dirsCount = dirsToImport.size();
    filesCount = this.filesToImport.size();
    showGui();
  }

  private void showGui() {
    if (dirsCount == 0 && filesCount == 0) {
      bt_ok.setEnabled(false);
    }
    setLocationRelativeTo(null);
    setVisible(true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    bt_ok = new javax.swing.JButton();
    bt_close = new javax.swing.JButton();
    label_dirs = new javax.swing.JLabel();
    label_files = new javax.swing.JLabel();
    label_dirCount = new javax.swing.JLabel();
    label_filesCount = new javax.swing.JLabel();
    progress_dirs = new javax.swing.JProgressBar();
    progress_files = new javax.swing.JProgressBar();
    label_message = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

    jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

    jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+3));
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Import Directories");

    bt_ok.setText("OK");
    bt_ok.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_okActionPerformed(evt);
      }
    });

    bt_close.setText("Close");
    bt_close.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        bt_closeActionPerformed(evt);
      }
    });

    label_dirs.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    label_dirs.setText("Directories:");

    label_files.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    label_files.setText("Files:");

    label_dirCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    label_dirCount.setText("0");

    label_filesCount.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    label_filesCount.setText("0");

    progress_dirs.setStringPainted(true);

    progress_files.setStringPainted(true);

    label_message.setText(" ");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(label_files, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                  .addComponent(label_dirs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addComponent(label_dirCount, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(label_filesCount, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(bt_ok)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bt_close)
                .addGap(26, 26, 26)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(progress_dirs, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
              .addComponent(progress_files, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(label_message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(label_dirs, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(label_dirCount)
          .addComponent(progress_dirs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(label_files)
              .addComponent(label_filesCount))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(bt_ok)
              .addComponent(bt_close)))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addComponent(progress_files, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(label_message)))
        .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void bt_closeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_closeActionPerformed
      dispose();
    }//GEN-LAST:event_bt_closeActionPerformed

    private void bt_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_okActionPerformed
      Commit commit = new Commit();
      Thread t = new Thread(commit);
      t.start();

    }//GEN-LAST:event_bt_okActionPerformed

  private class Commit implements Runnable {

    private int dirCounter;
    private int fileCounter;

    public Commit() {
    }

    public void run() {

      dirCounter = 0;
      fileCounter = 0;
      if (fileTreeRecords != null) {
        importFileTreeRecords();
      } else {
        importDirsAndFiles();
      }


      progress_dirs.setValue(0);
      progress_files.setValue(0);
      label_message.setText("Importing of photos finished");
      parent.tree.populate(0);

    }

    private void importFileTreeRecords() {
      for (Iterator<FileTreeRecord> it = fileTreeRecords.iterator(); it.hasNext();) {
        dirCounter++;
        FileTreeRecord fileTreeRecord = it.next();
        fileTreeRecord.save();
        File[] files = fileTreeRecord.files;
        for (int j = 0; j < files.length; j++) {
          fileCounter++;
          File file = files[j];
          FileRecord fr = new FileRecord(file.getAbsolutePath(), Tools.getCreateDate(file));
          fr.save();
          progress_files.setValue((fileCounter * 100) / filesCount);
        }

        progress_dirs.setValue((dirCounter * 100) / dirsCount);
      }
      progress_dirs.setValue(0);
      bt_ok.setEnabled(false);
    }

    private void importDirsAndFiles() {
      for (Iterator<FileTreeRecord> it = dirsToImport.iterator(); it.hasNext();) {
        FileTreeRecord f = it.next();
        f.save();
        dirCounter++;
        progress_dirs.setValue((dirCounter * 100) / dirsCount);
      }
      for (Iterator<File> it = filesToImport.iterator(); it.hasNext();) {
        fileCounter++;
        File file = it.next();
        if (file != null) {
          FileRecord fr = new FileRecord(file.getAbsolutePath(), Tools.getCreateDate(file));
          fr.save();
        }
        progress_files.setValue((fileCounter * 100) / filesCount);
      }
      progress_dirs.setValue(0);
      bt_ok.setEnabled(false);
    }
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton bt_close;
  private javax.swing.JButton bt_ok;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JLabel label_dirCount;
  private javax.swing.JLabel label_dirs;
  private javax.swing.JLabel label_files;
  private javax.swing.JLabel label_filesCount;
  private javax.swing.JLabel label_message;
  javax.swing.JProgressBar progress_dirs;
  private javax.swing.JProgressBar progress_files;
  // End of variables declaration//GEN-END:variables
}
